// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: push_service.proto

/*
	Package main is a generated protocol buffer package.

	It is generated from these files:
		push_service.proto

	It has these top-level messages:
		SilentPush
		Localizeable
		AlertingPush
		VoipPush
		PushBody
		PrivatePayload
		DeviceIdList
		Push
		Response
		PingRequest
		PongResponse
*/
package main

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SilentPush struct {
}

func (m *SilentPush) Reset()                    { *m = SilentPush{} }
func (*SilentPush) ProtoMessage()               {}
func (*SilentPush) Descriptor() ([]byte, []int) { return fileDescriptorPushService, []int{0} }

type Localizeable struct {
	LocKey  string   `protobuf:"bytes,1,opt,name=loc_key,json=locKey,proto3" json:"loc_key,omitempty"`
	LocArgs []string `protobuf:"bytes,2,rep,name=loc_args,json=locArgs" json:"loc_args,omitempty"`
}

func (m *Localizeable) Reset()                    { *m = Localizeable{} }
func (*Localizeable) ProtoMessage()               {}
func (*Localizeable) Descriptor() ([]byte, []int) { return fileDescriptorPushService, []int{1} }

func (m *Localizeable) GetLocKey() string {
	if m != nil {
		return m.LocKey
	}
	return ""
}

func (m *Localizeable) GetLocArgs() []string {
	if m != nil {
		return m.LocArgs
	}
	return nil
}

type AlertingPush struct {
	// Types that are valid to be assigned to AlertBody:
	//	*AlertingPush_LocAlertBody
	//	*AlertingPush_SimpleAlertBody
	AlertBody isAlertingPush_AlertBody `protobuf_oneof:"alert_body"`
	// Types that are valid to be assigned to AlertTitle:
	//	*AlertingPush_LocAlertTitle
	//	*AlertingPush_SimpleAlertTitle
	AlertTitle isAlertingPush_AlertTitle `protobuf_oneof:"alert_title"`
	Sound      string                    `protobuf:"bytes,5,opt,name=sound,proto3" json:"sound,omitempty"`
}

func (m *AlertingPush) Reset()                    { *m = AlertingPush{} }
func (*AlertingPush) ProtoMessage()               {}
func (*AlertingPush) Descriptor() ([]byte, []int) { return fileDescriptorPushService, []int{2} }

type isAlertingPush_AlertBody interface {
	isAlertingPush_AlertBody()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAlertingPush_AlertTitle interface {
	isAlertingPush_AlertTitle()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AlertingPush_LocAlertBody struct {
	LocAlertBody *Localizeable `protobuf:"bytes,1,opt,name=loc_alert_body,json=locAlertBody,oneof"`
}
type AlertingPush_SimpleAlertBody struct {
	SimpleAlertBody string `protobuf:"bytes,2,opt,name=simple_alert_body,json=simpleAlertBody,proto3,oneof"`
}
type AlertingPush_LocAlertTitle struct {
	LocAlertTitle *Localizeable `protobuf:"bytes,3,opt,name=loc_alert_title,json=locAlertTitle,oneof"`
}
type AlertingPush_SimpleAlertTitle struct {
	SimpleAlertTitle string `protobuf:"bytes,4,opt,name=simple_alert_title,json=simpleAlertTitle,proto3,oneof"`
}

func (*AlertingPush_LocAlertBody) isAlertingPush_AlertBody()      {}
func (*AlertingPush_SimpleAlertBody) isAlertingPush_AlertBody()   {}
func (*AlertingPush_LocAlertTitle) isAlertingPush_AlertTitle()    {}
func (*AlertingPush_SimpleAlertTitle) isAlertingPush_AlertTitle() {}

func (m *AlertingPush) GetAlertBody() isAlertingPush_AlertBody {
	if m != nil {
		return m.AlertBody
	}
	return nil
}
func (m *AlertingPush) GetAlertTitle() isAlertingPush_AlertTitle {
	if m != nil {
		return m.AlertTitle
	}
	return nil
}

func (m *AlertingPush) GetLocAlertBody() *Localizeable {
	if x, ok := m.GetAlertBody().(*AlertingPush_LocAlertBody); ok {
		return x.LocAlertBody
	}
	return nil
}

func (m *AlertingPush) GetSimpleAlertBody() string {
	if x, ok := m.GetAlertBody().(*AlertingPush_SimpleAlertBody); ok {
		return x.SimpleAlertBody
	}
	return ""
}

func (m *AlertingPush) GetLocAlertTitle() *Localizeable {
	if x, ok := m.GetAlertTitle().(*AlertingPush_LocAlertTitle); ok {
		return x.LocAlertTitle
	}
	return nil
}

func (m *AlertingPush) GetSimpleAlertTitle() string {
	if x, ok := m.GetAlertTitle().(*AlertingPush_SimpleAlertTitle); ok {
		return x.SimpleAlertTitle
	}
	return ""
}

func (m *AlertingPush) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AlertingPush) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AlertingPush_OneofMarshaler, _AlertingPush_OneofUnmarshaler, _AlertingPush_OneofSizer, []interface{}{
		(*AlertingPush_LocAlertBody)(nil),
		(*AlertingPush_SimpleAlertBody)(nil),
		(*AlertingPush_LocAlertTitle)(nil),
		(*AlertingPush_SimpleAlertTitle)(nil),
	}
}

func _AlertingPush_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AlertingPush)
	// alert_body
	switch x := m.AlertBody.(type) {
	case *AlertingPush_LocAlertBody:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocAlertBody); err != nil {
			return err
		}
	case *AlertingPush_SimpleAlertBody:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.SimpleAlertBody)
	case nil:
	default:
		return fmt.Errorf("AlertingPush.AlertBody has unexpected type %T", x)
	}
	// alert_title
	switch x := m.AlertTitle.(type) {
	case *AlertingPush_LocAlertTitle:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocAlertTitle); err != nil {
			return err
		}
	case *AlertingPush_SimpleAlertTitle:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.SimpleAlertTitle)
	case nil:
	default:
		return fmt.Errorf("AlertingPush.AlertTitle has unexpected type %T", x)
	}
	return nil
}

func _AlertingPush_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AlertingPush)
	switch tag {
	case 1: // alert_body.loc_alert_body
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Localizeable)
		err := b.DecodeMessage(msg)
		m.AlertBody = &AlertingPush_LocAlertBody{msg}
		return true, err
	case 2: // alert_body.simple_alert_body
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.AlertBody = &AlertingPush_SimpleAlertBody{x}
		return true, err
	case 3: // alert_title.loc_alert_title
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Localizeable)
		err := b.DecodeMessage(msg)
		m.AlertTitle = &AlertingPush_LocAlertTitle{msg}
		return true, err
	case 4: // alert_title.simple_alert_title
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.AlertTitle = &AlertingPush_SimpleAlertTitle{x}
		return true, err
	default:
		return false, nil
	}
}

func _AlertingPush_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AlertingPush)
	// alert_body
	switch x := m.AlertBody.(type) {
	case *AlertingPush_LocAlertBody:
		s := proto.Size(x.LocAlertBody)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AlertingPush_SimpleAlertBody:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.SimpleAlertBody)))
		n += len(x.SimpleAlertBody)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// alert_title
	switch x := m.AlertTitle.(type) {
	case *AlertingPush_LocAlertTitle:
		s := proto.Size(x.LocAlertTitle)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AlertingPush_SimpleAlertTitle:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.SimpleAlertTitle)))
		n += len(x.SimpleAlertTitle)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type VoipPush struct {
	CallId       int64 `protobuf:"varint,1,opt,name=callId,proto3" json:"callId,omitempty"`
	AttemptIndex int32 `protobuf:"varint,2,opt,name=attempt_index,json=attemptIndex,proto3" json:"attempt_index,omitempty"`
}

func (m *VoipPush) Reset()                    { *m = VoipPush{} }
func (*VoipPush) ProtoMessage()               {}
func (*VoipPush) Descriptor() ([]byte, []int) { return fileDescriptorPushService, []int{3} }

func (m *VoipPush) GetCallId() int64 {
	if m != nil {
		return m.CallId
	}
	return 0
}

func (m *VoipPush) GetAttemptIndex() int32 {
	if m != nil {
		return m.AttemptIndex
	}
	return 0
}

type PushBody struct {
	CollapseKey string `protobuf:"bytes,1,opt,name=collapse_key,json=collapseKey,proto3" json:"collapse_key,omitempty"`
	TimeToLive  int32  `protobuf:"varint,2,opt,name=time_to_live,json=timeToLive,proto3" json:"time_to_live,omitempty"`
	Seq         int32  `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	// Types that are valid to be assigned to Body:
	//	*PushBody_SilentPush
	//	*PushBody_AlertingPush
	//	*PushBody_VoipPush
	Body           isPushBody_Body `protobuf_oneof:"body"`
	PrivatePayload *PrivatePayload `protobuf:"bytes,7,opt,name=private_payload,json=privatePayload" json:"private_payload,omitempty"`
}

func (m *PushBody) Reset()                    { *m = PushBody{} }
func (*PushBody) ProtoMessage()               {}
func (*PushBody) Descriptor() ([]byte, []int) { return fileDescriptorPushService, []int{4} }

type isPushBody_Body interface {
	isPushBody_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PushBody_SilentPush struct {
	SilentPush *SilentPush `protobuf:"bytes,4,opt,name=silent_push,json=silentPush,oneof"`
}
type PushBody_AlertingPush struct {
	AlertingPush *AlertingPush `protobuf:"bytes,5,opt,name=alerting_push,json=alertingPush,oneof"`
}
type PushBody_VoipPush struct {
	VoipPush *VoipPush `protobuf:"bytes,6,opt,name=voip_push,json=voipPush,oneof"`
}

func (*PushBody_SilentPush) isPushBody_Body()   {}
func (*PushBody_AlertingPush) isPushBody_Body() {}
func (*PushBody_VoipPush) isPushBody_Body()     {}

func (m *PushBody) GetBody() isPushBody_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *PushBody) GetCollapseKey() string {
	if m != nil {
		return m.CollapseKey
	}
	return ""
}

func (m *PushBody) GetTimeToLive() int32 {
	if m != nil {
		return m.TimeToLive
	}
	return 0
}

func (m *PushBody) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PushBody) GetSilentPush() *SilentPush {
	if x, ok := m.GetBody().(*PushBody_SilentPush); ok {
		return x.SilentPush
	}
	return nil
}

func (m *PushBody) GetAlertingPush() *AlertingPush {
	if x, ok := m.GetBody().(*PushBody_AlertingPush); ok {
		return x.AlertingPush
	}
	return nil
}

func (m *PushBody) GetVoipPush() *VoipPush {
	if x, ok := m.GetBody().(*PushBody_VoipPush); ok {
		return x.VoipPush
	}
	return nil
}

func (m *PushBody) GetPrivatePayload() *PrivatePayload {
	if m != nil {
		return m.PrivatePayload
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PushBody) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PushBody_OneofMarshaler, _PushBody_OneofUnmarshaler, _PushBody_OneofSizer, []interface{}{
		(*PushBody_SilentPush)(nil),
		(*PushBody_AlertingPush)(nil),
		(*PushBody_VoipPush)(nil),
	}
}

func _PushBody_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PushBody)
	// body
	switch x := m.Body.(type) {
	case *PushBody_SilentPush:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SilentPush); err != nil {
			return err
		}
	case *PushBody_AlertingPush:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AlertingPush); err != nil {
			return err
		}
	case *PushBody_VoipPush:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoipPush); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PushBody.Body has unexpected type %T", x)
	}
	return nil
}

func _PushBody_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PushBody)
	switch tag {
	case 4: // body.silent_push
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SilentPush)
		err := b.DecodeMessage(msg)
		m.Body = &PushBody_SilentPush{msg}
		return true, err
	case 5: // body.alerting_push
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AlertingPush)
		err := b.DecodeMessage(msg)
		m.Body = &PushBody_AlertingPush{msg}
		return true, err
	case 6: // body.voip_push
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VoipPush)
		err := b.DecodeMessage(msg)
		m.Body = &PushBody_VoipPush{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PushBody_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PushBody)
	// body
	switch x := m.Body.(type) {
	case *PushBody_SilentPush:
		s := proto.Size(x.SilentPush)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PushBody_AlertingPush:
		s := proto.Size(x.AlertingPush)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PushBody_VoipPush:
		s := proto.Size(x.VoipPush)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PrivatePayload struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Body      []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *PrivatePayload) Reset()                    { *m = PrivatePayload{} }
func (*PrivatePayload) ProtoMessage()               {}
func (*PrivatePayload) Descriptor() ([]byte, []int) { return fileDescriptorPushService, []int{5} }

func (m *PrivatePayload) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *PrivatePayload) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type DeviceIdList struct {
	DeviceIds []string `protobuf:"bytes,1,rep,name=device_ids,json=deviceIds" json:"device_ids,omitempty"`
}

func (m *DeviceIdList) Reset()                    { *m = DeviceIdList{} }
func (*DeviceIdList) ProtoMessage()               {}
func (*DeviceIdList) Descriptor() ([]byte, []int) { return fileDescriptorPushService, []int{6} }

func (m *DeviceIdList) GetDeviceIds() []string {
	if m != nil {
		return m.DeviceIds
	}
	return nil
}

type Push struct {
	Destinations map[string]*DeviceIdList `protobuf:"bytes,1,rep,name=destinations" json:"destinations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Body         *PushBody                `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *Push) Reset()                    { *m = Push{} }
func (*Push) ProtoMessage()               {}
func (*Push) Descriptor() ([]byte, []int) { return fileDescriptorPushService, []int{7} }

func (m *Push) GetDestinations() map[string]*DeviceIdList {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *Push) GetBody() *PushBody {
	if m != nil {
		return m.Body
	}
	return nil
}

type Response struct {
	ProjectInvalidations map[string]*DeviceIdList `protobuf:"bytes,1,rep,name=project_invalidations,json=projectInvalidations" json:"project_invalidations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorPushService, []int{8} }

func (m *Response) GetProjectInvalidations() map[string]*DeviceIdList {
	if m != nil {
		return m.ProjectInvalidations
	}
	return nil
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptorPushService, []int{9} }

type PongResponse struct {
}

func (m *PongResponse) Reset()                    { *m = PongResponse{} }
func (*PongResponse) ProtoMessage()               {}
func (*PongResponse) Descriptor() ([]byte, []int) { return fileDescriptorPushService, []int{10} }

func init() {
	proto.RegisterType((*SilentPush)(nil), "main.SilentPush")
	proto.RegisterType((*Localizeable)(nil), "main.Localizeable")
	proto.RegisterType((*AlertingPush)(nil), "main.AlertingPush")
	proto.RegisterType((*VoipPush)(nil), "main.VoipPush")
	proto.RegisterType((*PushBody)(nil), "main.PushBody")
	proto.RegisterType((*PrivatePayload)(nil), "main.PrivatePayload")
	proto.RegisterType((*DeviceIdList)(nil), "main.DeviceIdList")
	proto.RegisterType((*Push)(nil), "main.Push")
	proto.RegisterType((*Response)(nil), "main.Response")
	proto.RegisterType((*PingRequest)(nil), "main.PingRequest")
	proto.RegisterType((*PongResponse)(nil), "main.PongResponse")
}
func (this *SilentPush) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SilentPush)
	if !ok {
		that2, ok := that.(SilentPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *Localizeable) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Localizeable)
	if !ok {
		that2, ok := that.(Localizeable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.LocKey != that1.LocKey {
		return false
	}
	if len(this.LocArgs) != len(that1.LocArgs) {
		return false
	}
	for i := range this.LocArgs {
		if this.LocArgs[i] != that1.LocArgs[i] {
			return false
		}
	}
	return true
}
func (this *AlertingPush) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AlertingPush)
	if !ok {
		that2, ok := that.(AlertingPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.AlertBody == nil {
		if this.AlertBody != nil {
			return false
		}
	} else if this.AlertBody == nil {
		return false
	} else if !this.AlertBody.Equal(that1.AlertBody) {
		return false
	}
	if that1.AlertTitle == nil {
		if this.AlertTitle != nil {
			return false
		}
	} else if this.AlertTitle == nil {
		return false
	} else if !this.AlertTitle.Equal(that1.AlertTitle) {
		return false
	}
	if this.Sound != that1.Sound {
		return false
	}
	return true
}
func (this *AlertingPush_LocAlertBody) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AlertingPush_LocAlertBody)
	if !ok {
		that2, ok := that.(AlertingPush_LocAlertBody)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.LocAlertBody.Equal(that1.LocAlertBody) {
		return false
	}
	return true
}
func (this *AlertingPush_SimpleAlertBody) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AlertingPush_SimpleAlertBody)
	if !ok {
		that2, ok := that.(AlertingPush_SimpleAlertBody)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SimpleAlertBody != that1.SimpleAlertBody {
		return false
	}
	return true
}
func (this *AlertingPush_LocAlertTitle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AlertingPush_LocAlertTitle)
	if !ok {
		that2, ok := that.(AlertingPush_LocAlertTitle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.LocAlertTitle.Equal(that1.LocAlertTitle) {
		return false
	}
	return true
}
func (this *AlertingPush_SimpleAlertTitle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AlertingPush_SimpleAlertTitle)
	if !ok {
		that2, ok := that.(AlertingPush_SimpleAlertTitle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SimpleAlertTitle != that1.SimpleAlertTitle {
		return false
	}
	return true
}
func (this *VoipPush) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VoipPush)
	if !ok {
		that2, ok := that.(VoipPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	if this.AttemptIndex != that1.AttemptIndex {
		return false
	}
	return true
}
func (this *PushBody) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PushBody)
	if !ok {
		that2, ok := that.(PushBody)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CollapseKey != that1.CollapseKey {
		return false
	}
	if this.TimeToLive != that1.TimeToLive {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	if !this.PrivatePayload.Equal(that1.PrivatePayload) {
		return false
	}
	return true
}
func (this *PushBody_SilentPush) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PushBody_SilentPush)
	if !ok {
		that2, ok := that.(PushBody_SilentPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SilentPush.Equal(that1.SilentPush) {
		return false
	}
	return true
}
func (this *PushBody_AlertingPush) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PushBody_AlertingPush)
	if !ok {
		that2, ok := that.(PushBody_AlertingPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.AlertingPush.Equal(that1.AlertingPush) {
		return false
	}
	return true
}
func (this *PushBody_VoipPush) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PushBody_VoipPush)
	if !ok {
		that2, ok := that.(PushBody_VoipPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.VoipPush.Equal(that1.VoipPush) {
		return false
	}
	return true
}
func (this *PrivatePayload) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PrivatePayload)
	if !ok {
		that2, ok := that.(PrivatePayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	return true
}
func (this *DeviceIdList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeviceIdList)
	if !ok {
		that2, ok := that.(DeviceIdList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.DeviceIds) != len(that1.DeviceIds) {
		return false
	}
	for i := range this.DeviceIds {
		if this.DeviceIds[i] != that1.DeviceIds[i] {
			return false
		}
	}
	return true
}
func (this *Push) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Push)
	if !ok {
		that2, ok := that.(Push)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if !this.Destinations[i].Equal(that1.Destinations[i]) {
			return false
		}
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ProjectInvalidations) != len(that1.ProjectInvalidations) {
		return false
	}
	for i := range this.ProjectInvalidations {
		if !this.ProjectInvalidations[i].Equal(that1.ProjectInvalidations[i]) {
			return false
		}
	}
	return true
}
func (this *PingRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PingRequest)
	if !ok {
		that2, ok := that.(PingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *PongResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PongResponse)
	if !ok {
		that2, ok := that.(PongResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *SilentPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&main.SilentPush{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Localizeable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&main.Localizeable{")
	s = append(s, "LocKey: "+fmt.Sprintf("%#v", this.LocKey)+",\n")
	s = append(s, "LocArgs: "+fmt.Sprintf("%#v", this.LocArgs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AlertingPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&main.AlertingPush{")
	if this.AlertBody != nil {
		s = append(s, "AlertBody: "+fmt.Sprintf("%#v", this.AlertBody)+",\n")
	}
	if this.AlertTitle != nil {
		s = append(s, "AlertTitle: "+fmt.Sprintf("%#v", this.AlertTitle)+",\n")
	}
	s = append(s, "Sound: "+fmt.Sprintf("%#v", this.Sound)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AlertingPush_LocAlertBody) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&main.AlertingPush_LocAlertBody{` +
		`LocAlertBody:` + fmt.Sprintf("%#v", this.LocAlertBody) + `}`}, ", ")
	return s
}
func (this *AlertingPush_SimpleAlertBody) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&main.AlertingPush_SimpleAlertBody{` +
		`SimpleAlertBody:` + fmt.Sprintf("%#v", this.SimpleAlertBody) + `}`}, ", ")
	return s
}
func (this *AlertingPush_LocAlertTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&main.AlertingPush_LocAlertTitle{` +
		`LocAlertTitle:` + fmt.Sprintf("%#v", this.LocAlertTitle) + `}`}, ", ")
	return s
}
func (this *AlertingPush_SimpleAlertTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&main.AlertingPush_SimpleAlertTitle{` +
		`SimpleAlertTitle:` + fmt.Sprintf("%#v", this.SimpleAlertTitle) + `}`}, ", ")
	return s
}
func (this *VoipPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&main.VoipPush{")
	s = append(s, "CallId: "+fmt.Sprintf("%#v", this.CallId)+",\n")
	s = append(s, "AttemptIndex: "+fmt.Sprintf("%#v", this.AttemptIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushBody) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&main.PushBody{")
	s = append(s, "CollapseKey: "+fmt.Sprintf("%#v", this.CollapseKey)+",\n")
	s = append(s, "TimeToLive: "+fmt.Sprintf("%#v", this.TimeToLive)+",\n")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	if this.PrivatePayload != nil {
		s = append(s, "PrivatePayload: "+fmt.Sprintf("%#v", this.PrivatePayload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushBody_SilentPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&main.PushBody_SilentPush{` +
		`SilentPush:` + fmt.Sprintf("%#v", this.SilentPush) + `}`}, ", ")
	return s
}
func (this *PushBody_AlertingPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&main.PushBody_AlertingPush{` +
		`AlertingPush:` + fmt.Sprintf("%#v", this.AlertingPush) + `}`}, ", ")
	return s
}
func (this *PushBody_VoipPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&main.PushBody_VoipPush{` +
		`VoipPush:` + fmt.Sprintf("%#v", this.VoipPush) + `}`}, ", ")
	return s
}
func (this *PrivatePayload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&main.PrivatePayload{")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceIdList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&main.DeviceIdList{")
	s = append(s, "DeviceIds: "+fmt.Sprintf("%#v", this.DeviceIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Push) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&main.Push{")
	keysForDestinations := make([]string, 0, len(this.Destinations))
	for k, _ := range this.Destinations {
		keysForDestinations = append(keysForDestinations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDestinations)
	mapStringForDestinations := "map[string]*DeviceIdList{"
	for _, k := range keysForDestinations {
		mapStringForDestinations += fmt.Sprintf("%#v: %#v,", k, this.Destinations[k])
	}
	mapStringForDestinations += "}"
	if this.Destinations != nil {
		s = append(s, "Destinations: "+mapStringForDestinations+",\n")
	}
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&main.Response{")
	keysForProjectInvalidations := make([]string, 0, len(this.ProjectInvalidations))
	for k, _ := range this.ProjectInvalidations {
		keysForProjectInvalidations = append(keysForProjectInvalidations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForProjectInvalidations)
	mapStringForProjectInvalidations := "map[string]*DeviceIdList{"
	for _, k := range keysForProjectInvalidations {
		mapStringForProjectInvalidations += fmt.Sprintf("%#v: %#v,", k, this.ProjectInvalidations[k])
	}
	mapStringForProjectInvalidations += "}"
	if this.ProjectInvalidations != nil {
		s = append(s, "ProjectInvalidations: "+mapStringForProjectInvalidations+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&main.PingRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PongResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&main.PongResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPushService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Pushing service

type PushingClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error)
	PushStream(ctx context.Context, opts ...grpc.CallOption) (Pushing_PushStreamClient, error)
}

type pushingClient struct {
	cc *grpc.ClientConn
}

func NewPushingClient(cc *grpc.ClientConn) PushingClient {
	return &pushingClient{cc}
}

func (c *pushingClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := grpc.Invoke(ctx, "/main.Pushing/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushingClient) PushStream(ctx context.Context, opts ...grpc.CallOption) (Pushing_PushStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Pushing_serviceDesc.Streams[0], c.cc, "/main.Pushing/PushStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushingPushStreamClient{stream}
	return x, nil
}

type Pushing_PushStreamClient interface {
	Send(*Push) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type pushingPushStreamClient struct {
	grpc.ClientStream
}

func (x *pushingPushStreamClient) Send(m *Push) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pushingPushStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Pushing service

type PushingServer interface {
	Ping(context.Context, *PingRequest) (*PongResponse, error)
	PushStream(Pushing_PushStreamServer) error
}

func RegisterPushingServer(s *grpc.Server, srv PushingServer) {
	s.RegisterService(&_Pushing_serviceDesc, srv)
}

func _Pushing_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushingServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Pushing/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushingServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pushing_PushStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushingServer).PushStream(&pushingPushStreamServer{stream})
}

type Pushing_PushStreamServer interface {
	Send(*Response) error
	Recv() (*Push, error)
	grpc.ServerStream
}

type pushingPushStreamServer struct {
	grpc.ServerStream
}

func (x *pushingPushStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pushingPushStreamServer) Recv() (*Push, error) {
	m := new(Push)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Pushing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.Pushing",
	HandlerType: (*PushingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Pushing_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushStream",
			Handler:       _Pushing_PushStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "push_service.proto",
}

func (m *SilentPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SilentPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Localizeable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Localizeable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPushService(dAtA, i, uint64(len(m.LocKey)))
		i += copy(dAtA[i:], m.LocKey)
	}
	if len(m.LocArgs) > 0 {
		for _, s := range m.LocArgs {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *AlertingPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertingPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AlertBody != nil {
		nn1, err := m.AlertBody.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.AlertTitle != nil {
		nn2, err := m.AlertTitle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if len(m.Sound) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPushService(dAtA, i, uint64(len(m.Sound)))
		i += copy(dAtA[i:], m.Sound)
	}
	return i, nil
}

func (m *AlertingPush_LocAlertBody) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LocAlertBody != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPushService(dAtA, i, uint64(m.LocAlertBody.Size()))
		n3, err := m.LocAlertBody.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *AlertingPush_SimpleAlertBody) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintPushService(dAtA, i, uint64(len(m.SimpleAlertBody)))
	i += copy(dAtA[i:], m.SimpleAlertBody)
	return i, nil
}
func (m *AlertingPush_LocAlertTitle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LocAlertTitle != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPushService(dAtA, i, uint64(m.LocAlertTitle.Size()))
		n4, err := m.LocAlertTitle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *AlertingPush_SimpleAlertTitle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x22
	i++
	i = encodeVarintPushService(dAtA, i, uint64(len(m.SimpleAlertTitle)))
	i += copy(dAtA[i:], m.SimpleAlertTitle)
	return i, nil
}
func (m *VoipPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoipPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CallId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPushService(dAtA, i, uint64(m.CallId))
	}
	if m.AttemptIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPushService(dAtA, i, uint64(m.AttemptIndex))
	}
	return i, nil
}

func (m *PushBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushBody) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CollapseKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPushService(dAtA, i, uint64(len(m.CollapseKey)))
		i += copy(dAtA[i:], m.CollapseKey)
	}
	if m.TimeToLive != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPushService(dAtA, i, uint64(m.TimeToLive))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPushService(dAtA, i, uint64(m.Seq))
	}
	if m.Body != nil {
		nn5, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if m.PrivatePayload != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPushService(dAtA, i, uint64(m.PrivatePayload.Size()))
		n6, err := m.PrivatePayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *PushBody_SilentPush) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SilentPush != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPushService(dAtA, i, uint64(m.SilentPush.Size()))
		n7, err := m.SilentPush.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *PushBody_AlertingPush) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AlertingPush != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPushService(dAtA, i, uint64(m.AlertingPush.Size()))
		n8, err := m.AlertingPush.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *PushBody_VoipPush) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoipPush != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPushService(dAtA, i, uint64(m.VoipPush.Size()))
		n9, err := m.VoipPush.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *PrivatePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivatePayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPushService(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPushService(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	return i, nil
}

func (m *DeviceIdList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceIdList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for _, s := range m.DeviceIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Push) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Push) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Destinations) > 0 {
		for k, _ := range m.Destinations {
			dAtA[i] = 0xa
			i++
			v := m.Destinations[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovPushService(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovPushService(uint64(len(k))) + msgSize
			i = encodeVarintPushService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPushService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintPushService(dAtA, i, uint64(v.Size()))
				n10, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n10
			}
		}
	}
	if m.Body != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPushService(dAtA, i, uint64(m.Body.Size()))
		n11, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProjectInvalidations) > 0 {
		for k, _ := range m.ProjectInvalidations {
			dAtA[i] = 0xa
			i++
			v := m.ProjectInvalidations[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovPushService(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovPushService(uint64(len(k))) + msgSize
			i = encodeVarintPushService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPushService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintPushService(dAtA, i, uint64(v.Size()))
				n12, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n12
			}
		}
	}
	return i, nil
}

func (m *PingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PongResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PongResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64PushService(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32PushService(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPushService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SilentPush) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Localizeable) Size() (n int) {
	var l int
	_ = l
	l = len(m.LocKey)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	if len(m.LocArgs) > 0 {
		for _, s := range m.LocArgs {
			l = len(s)
			n += 1 + l + sovPushService(uint64(l))
		}
	}
	return n
}

func (m *AlertingPush) Size() (n int) {
	var l int
	_ = l
	if m.AlertBody != nil {
		n += m.AlertBody.Size()
	}
	if m.AlertTitle != nil {
		n += m.AlertTitle.Size()
	}
	l = len(m.Sound)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}

func (m *AlertingPush_LocAlertBody) Size() (n int) {
	var l int
	_ = l
	if m.LocAlertBody != nil {
		l = m.LocAlertBody.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}
func (m *AlertingPush_SimpleAlertBody) Size() (n int) {
	var l int
	_ = l
	l = len(m.SimpleAlertBody)
	n += 1 + l + sovPushService(uint64(l))
	return n
}
func (m *AlertingPush_LocAlertTitle) Size() (n int) {
	var l int
	_ = l
	if m.LocAlertTitle != nil {
		l = m.LocAlertTitle.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}
func (m *AlertingPush_SimpleAlertTitle) Size() (n int) {
	var l int
	_ = l
	l = len(m.SimpleAlertTitle)
	n += 1 + l + sovPushService(uint64(l))
	return n
}
func (m *VoipPush) Size() (n int) {
	var l int
	_ = l
	if m.CallId != 0 {
		n += 1 + sovPushService(uint64(m.CallId))
	}
	if m.AttemptIndex != 0 {
		n += 1 + sovPushService(uint64(m.AttemptIndex))
	}
	return n
}

func (m *PushBody) Size() (n int) {
	var l int
	_ = l
	l = len(m.CollapseKey)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	if m.TimeToLive != 0 {
		n += 1 + sovPushService(uint64(m.TimeToLive))
	}
	if m.Seq != 0 {
		n += 1 + sovPushService(uint64(m.Seq))
	}
	if m.Body != nil {
		n += m.Body.Size()
	}
	if m.PrivatePayload != nil {
		l = m.PrivatePayload.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}

func (m *PushBody_SilentPush) Size() (n int) {
	var l int
	_ = l
	if m.SilentPush != nil {
		l = m.SilentPush.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}
func (m *PushBody_AlertingPush) Size() (n int) {
	var l int
	_ = l
	if m.AlertingPush != nil {
		l = m.AlertingPush.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}
func (m *PushBody_VoipPush) Size() (n int) {
	var l int
	_ = l
	if m.VoipPush != nil {
		l = m.VoipPush.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}
func (m *PrivatePayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}

func (m *DeviceIdList) Size() (n int) {
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for _, s := range m.DeviceIds {
			l = len(s)
			n += 1 + l + sovPushService(uint64(l))
		}
	}
	return n
}

func (m *Push) Size() (n int) {
	var l int
	_ = l
	if len(m.Destinations) > 0 {
		for k, v := range m.Destinations {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPushService(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPushService(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPushService(uint64(mapEntrySize))
		}
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if len(m.ProjectInvalidations) > 0 {
		for k, v := range m.ProjectInvalidations {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPushService(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPushService(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPushService(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PingRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PongResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovPushService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPushService(x uint64) (n int) {
	return sovPushService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SilentPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SilentPush{`,
		`}`,
	}, "")
	return s
}
func (this *Localizeable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Localizeable{`,
		`LocKey:` + fmt.Sprintf("%v", this.LocKey) + `,`,
		`LocArgs:` + fmt.Sprintf("%v", this.LocArgs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlertingPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlertingPush{`,
		`AlertBody:` + fmt.Sprintf("%v", this.AlertBody) + `,`,
		`AlertTitle:` + fmt.Sprintf("%v", this.AlertTitle) + `,`,
		`Sound:` + fmt.Sprintf("%v", this.Sound) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlertingPush_LocAlertBody) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlertingPush_LocAlertBody{`,
		`LocAlertBody:` + strings.Replace(fmt.Sprintf("%v", this.LocAlertBody), "Localizeable", "Localizeable", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlertingPush_SimpleAlertBody) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlertingPush_SimpleAlertBody{`,
		`SimpleAlertBody:` + fmt.Sprintf("%v", this.SimpleAlertBody) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlertingPush_LocAlertTitle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlertingPush_LocAlertTitle{`,
		`LocAlertTitle:` + strings.Replace(fmt.Sprintf("%v", this.LocAlertTitle), "Localizeable", "Localizeable", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlertingPush_SimpleAlertTitle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlertingPush_SimpleAlertTitle{`,
		`SimpleAlertTitle:` + fmt.Sprintf("%v", this.SimpleAlertTitle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoipPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoipPush{`,
		`CallId:` + fmt.Sprintf("%v", this.CallId) + `,`,
		`AttemptIndex:` + fmt.Sprintf("%v", this.AttemptIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushBody) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushBody{`,
		`CollapseKey:` + fmt.Sprintf("%v", this.CollapseKey) + `,`,
		`TimeToLive:` + fmt.Sprintf("%v", this.TimeToLive) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`PrivatePayload:` + strings.Replace(fmt.Sprintf("%v", this.PrivatePayload), "PrivatePayload", "PrivatePayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushBody_SilentPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushBody_SilentPush{`,
		`SilentPush:` + strings.Replace(fmt.Sprintf("%v", this.SilentPush), "SilentPush", "SilentPush", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushBody_AlertingPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushBody_AlertingPush{`,
		`AlertingPush:` + strings.Replace(fmt.Sprintf("%v", this.AlertingPush), "AlertingPush", "AlertingPush", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushBody_VoipPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushBody_VoipPush{`,
		`VoipPush:` + strings.Replace(fmt.Sprintf("%v", this.VoipPush), "VoipPush", "VoipPush", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrivatePayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrivatePayload{`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceIdList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceIdList{`,
		`DeviceIds:` + fmt.Sprintf("%v", this.DeviceIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Push) String() string {
	if this == nil {
		return "nil"
	}
	keysForDestinations := make([]string, 0, len(this.Destinations))
	for k, _ := range this.Destinations {
		keysForDestinations = append(keysForDestinations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDestinations)
	mapStringForDestinations := "map[string]*DeviceIdList{"
	for _, k := range keysForDestinations {
		mapStringForDestinations += fmt.Sprintf("%v: %v,", k, this.Destinations[k])
	}
	mapStringForDestinations += "}"
	s := strings.Join([]string{`&Push{`,
		`Destinations:` + mapStringForDestinations + `,`,
		`Body:` + strings.Replace(fmt.Sprintf("%v", this.Body), "PushBody", "PushBody", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	keysForProjectInvalidations := make([]string, 0, len(this.ProjectInvalidations))
	for k, _ := range this.ProjectInvalidations {
		keysForProjectInvalidations = append(keysForProjectInvalidations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForProjectInvalidations)
	mapStringForProjectInvalidations := "map[string]*DeviceIdList{"
	for _, k := range keysForProjectInvalidations {
		mapStringForProjectInvalidations += fmt.Sprintf("%v: %v,", k, this.ProjectInvalidations[k])
	}
	mapStringForProjectInvalidations += "}"
	s := strings.Join([]string{`&Response{`,
		`ProjectInvalidations:` + mapStringForProjectInvalidations + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingRequest{`,
		`}`,
	}, "")
	return s
}
func (this *PongResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PongResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPushService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SilentPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SilentPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SilentPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Localizeable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Localizeable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Localizeable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocArgs = append(m.LocArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlertingPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertingPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertingPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocAlertBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Localizeable{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlertBody = &AlertingPush_LocAlertBody{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleAlertBody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertBody = &AlertingPush_SimpleAlertBody{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocAlertTitle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Localizeable{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlertTitle = &AlertingPush_LocAlertTitle{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleAlertTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertTitle = &AlertingPush_SimpleAlertTitle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoipPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoipPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoipPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptIndex", wireType)
			}
			m.AttemptIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttemptIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollapseKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollapseKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeToLive", wireType)
			}
			m.TimeToLive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeToLive |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SilentPush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SilentPush{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &PushBody_SilentPush{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertingPush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AlertingPush{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &PushBody_AlertingPush{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoipPush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VoipPush{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &PushBody_VoipPush{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivatePayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivatePayload == nil {
				m.PrivatePayload = &PrivatePayload{}
			}
			if err := m.PrivatePayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivatePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivatePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivatePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceIdList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceIdList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceIdList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceIds = append(m.DeviceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Push) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthPushService
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Destinations == nil {
				m.Destinations = make(map[string]*DeviceIdList)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPushService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPushService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthPushService
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthPushService
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &DeviceIdList{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Destinations[mapkey] = mapvalue
			} else {
				var mapvalue *DeviceIdList
				m.Destinations[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &PushBody{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectInvalidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthPushService
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.ProjectInvalidations == nil {
				m.ProjectInvalidations = make(map[string]*DeviceIdList)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPushService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPushService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthPushService
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthPushService
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &DeviceIdList{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.ProjectInvalidations[mapkey] = mapvalue
			} else {
				var mapvalue *DeviceIdList
				m.ProjectInvalidations[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PongResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PongResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PongResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPushService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPushService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPushService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPushService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPushService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPushService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("push_service.proto", fileDescriptorPushService) }

var fileDescriptorPushService = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xbd, 0x8e, 0x23, 0x45,
	0x10, 0x9e, 0xf6, 0xdf, 0xda, 0xe5, 0xb1, 0x77, 0xb7, 0xb5, 0x80, 0xcf, 0x82, 0xd1, 0x32, 0x24,
	0x0e, 0xee, 0x0c, 0xf2, 0x25, 0x70, 0x02, 0x89, 0x33, 0x87, 0xb0, 0xc5, 0x06, 0x56, 0xef, 0x89,
	0x04, 0xa1, 0x51, 0xdb, 0xd3, 0xf2, 0xf6, 0xd1, 0x9e, 0x9e, 0x9b, 0x6e, 0x8f, 0x30, 0x11, 0x8f,
	0x40, 0xca, 0x1b, 0xf0, 0x1a, 0x24, 0x40, 0x78, 0x21, 0x21, 0x6b, 0x12, 0xc2, 0x7b, 0x04, 0xd4,
	0xdd, 0xe3, 0x9d, 0xb1, 0x60, 0x23, 0x32, 0x77, 0xd5, 0xf7, 0x7d, 0x55, 0xf5, 0x55, 0x8d, 0x01,
	0xa7, 0x5b, 0x75, 0x13, 0x29, 0x96, 0xe5, 0x7c, 0xc5, 0xc6, 0x69, 0x26, 0xb5, 0xc4, 0x8d, 0x0d,
	0xe5, 0x49, 0xe8, 0x03, 0x5c, 0x73, 0xc1, 0x12, 0xbd, 0xd8, 0xaa, 0x9b, 0x70, 0x0a, 0xfe, 0x95,
	0x5c, 0x51, 0xc1, 0xbf, 0x67, 0x74, 0x29, 0x18, 0x7e, 0x0b, 0x4e, 0x84, 0x5c, 0x45, 0xdf, 0xb2,
	0xdd, 0x00, 0x5d, 0xa2, 0x51, 0x87, 0xb4, 0x84, 0x5c, 0x7d, 0xc9, 0x76, 0xf8, 0x01, 0xb4, 0x4d,
	0x82, 0x66, 0x6b, 0x35, 0xa8, 0x5d, 0xd6, 0x47, 0x1d, 0x62, 0x80, 0x4f, 0xb3, 0xb5, 0x0a, 0x7f,
	0xaa, 0x81, 0xff, 0x54, 0xb0, 0x4c, 0xf3, 0x64, 0x6d, 0x44, 0xf1, 0x13, 0xe8, 0x5b, 0xac, 0x89,
	0x45, 0x4b, 0x19, 0x3b, 0xad, 0xee, 0x04, 0x8f, 0x4d, 0x07, 0xe3, 0x6a, 0xc1, 0x99, 0x47, 0x7c,
	0xa3, 0x63, 0xa0, 0x53, 0x19, 0xef, 0xf0, 0x43, 0x38, 0x57, 0x7c, 0x93, 0x0a, 0x56, 0xa5, 0xd7,
	0x4c, 0x2b, 0x33, 0x8f, 0x9c, 0xba, 0x54, 0x89, 0xfe, 0x18, 0x4e, 0xcb, 0x4a, 0x9a, 0x6b, 0xc1,
	0x06, 0xf5, 0x7b, 0x4b, 0x21, 0xd2, 0x3b, 0x94, 0x7a, 0x6e, 0xa0, 0x78, 0x0c, 0xf8, 0xa8, 0x96,
	0x13, 0x68, 0xd8, 0x62, 0x88, 0x9c, 0x55, 0x8a, 0x39, 0xfc, 0x05, 0x34, 0x95, 0xdc, 0x26, 0xf1,
	0xa0, 0x69, 0xad, 0x71, 0x8f, 0xa9, 0x0f, 0x50, 0xb6, 0x3a, 0xed, 0x41, 0xb7, 0x22, 0x16, 0x7e,
	0x01, 0xed, 0xaf, 0x24, 0x4f, 0xad, 0x2d, 0x6f, 0x42, 0x6b, 0x45, 0x85, 0x98, 0xc7, 0xd6, 0x8e,
	0x3a, 0x29, 0x5e, 0xf8, 0x3d, 0xe8, 0x51, 0xad, 0xd9, 0x26, 0xd5, 0x11, 0x4f, 0x62, 0xf6, 0x9d,
	0x1d, 0xb7, 0x49, 0xfc, 0x22, 0x38, 0x37, 0xb1, 0xf0, 0xb7, 0x1a, 0xb4, 0x8d, 0x8a, 0x1d, 0xfb,
	0x5d, 0xf0, 0x57, 0x52, 0x08, 0x9a, 0x2a, 0x56, 0x59, 0x55, 0xf7, 0x10, 0x33, 0xfb, 0xba, 0x04,
	0x5f, 0xf3, 0x0d, 0x8b, 0xb4, 0x8c, 0x04, 0xcf, 0x59, 0xa1, 0x09, 0x26, 0xf6, 0x5c, 0x5e, 0xf1,
	0x9c, 0xe1, 0x33, 0xa8, 0x2b, 0xf6, 0xd2, 0xfa, 0xd5, 0x24, 0xe6, 0x27, 0x7e, 0x0c, 0x5d, 0x65,
	0x4f, 0x23, 0x32, 0xd7, 0x63, 0x8d, 0xe8, 0x4e, 0xce, 0x9c, 0x93, 0xe5, 0xcd, 0xcc, 0x3c, 0x02,
	0xea, 0xee, 0x85, 0x3f, 0x82, 0x1e, 0x2d, 0x96, 0xef, 0x68, 0xcd, 0xea, 0x02, 0xaa, 0x77, 0x61,
	0x76, 0x4d, 0xab, 0x77, 0xf2, 0x08, 0x3a, 0xb9, 0xe4, 0xa9, 0xa3, 0xb5, 0x2c, 0xad, 0xef, 0x68,
	0x07, 0xcf, 0x66, 0x1e, 0x69, 0xe7, 0x07, 0xff, 0x3e, 0x81, 0xd3, 0x34, 0xe3, 0x39, 0xd5, 0x2c,
	0x4a, 0xe9, 0x4e, 0x48, 0x1a, 0x0f, 0x4e, 0x2c, 0xe9, 0xc2, 0x91, 0x16, 0x2e, 0xb9, 0x70, 0x39,
	0xd2, 0x4f, 0x8f, 0xde, 0xd3, 0x16, 0x34, 0xcc, 0x86, 0xc2, 0xcf, 0xa0, 0x7f, 0x8c, 0xc4, 0xef,
	0x00, 0xa4, 0xdb, 0xa5, 0xe0, 0xe5, 0xdd, 0xfb, 0xa4, 0xe3, 0x22, 0xc6, 0x4a, 0xec, 0x88, 0xd6,
	0x42, 0x9f, 0x38, 0x91, 0x47, 0xe0, 0x3f, 0x63, 0xe6, 0xdb, 0x9a, 0xc7, 0x57, 0x5c, 0x69, 0x23,
	0x11, 0xdb, 0x77, 0xc4, 0x63, 0x35, 0x40, 0xf6, 0x03, 0xe9, 0xc4, 0x05, 0x42, 0x85, 0xbf, 0x20,
	0x68, 0xd8, 0x19, 0x3e, 0x05, 0x3f, 0x66, 0x4a, 0xf3, 0x84, 0x6a, 0x2e, 0x13, 0x87, 0xec, 0x4e,
	0xde, 0x2e, 0x06, 0xd8, 0xaa, 0x9b, 0xf1, 0xb3, 0x4a, 0xfa, 0xf3, 0x44, 0x67, 0x3b, 0x72, 0xc4,
	0xc0, 0x61, 0xa5, 0x9b, 0x3b, 0xbf, 0x0e, 0x97, 0xe1, 0xba, 0x1b, 0x5e, 0xc3, 0xf9, 0xbf, 0x64,
	0xcc, 0xbe, 0xcb, 0x5b, 0x31, 0x3f, 0xf1, 0x08, 0x9a, 0x39, 0x15, 0x5b, 0x56, 0x68, 0x15, 0x2b,
	0xab, 0xce, 0x45, 0x1c, 0xe0, 0x49, 0xed, 0x43, 0x14, 0xfe, 0x8a, 0xa0, 0x4d, 0x98, 0x4a, 0x65,
	0xa2, 0x18, 0xfe, 0x06, 0xde, 0x48, 0x33, 0xf9, 0x82, 0xad, 0xcc, 0xcd, 0xe6, 0x54, 0xf0, 0xf8,
	0x68, 0xa0, 0x91, 0x93, 0x3a, 0xc0, 0xc7, 0x0b, 0x87, 0x9d, 0x57, 0xa1, 0x6e, 0xb8, 0x8b, 0xf4,
	0x3f, 0x52, 0xc3, 0xaf, 0xe1, 0xc1, 0xbd, 0x94, 0xff, 0x3d, 0x48, 0x0f, 0xba, 0x0b, 0x9e, 0xac,
	0x09, 0x7b, 0xb9, 0x65, 0x4a, 0x87, 0x7d, 0xf0, 0x17, 0xd2, 0x3c, 0x5d, 0xaf, 0x93, 0x17, 0x70,
	0x62, 0xec, 0xe4, 0xc9, 0x1a, 0xbf, 0x0f, 0x0d, 0x83, 0xc4, 0xe7, 0x85, 0xcb, 0x25, 0x6b, 0x58,
	0xd4, 0xa8, 0x32, 0x43, 0x0f, 0x8f, 0x01, 0x0c, 0xf7, 0x5a, 0x67, 0x8c, 0x6e, 0x30, 0x94, 0xcb,
	0x19, 0xf6, 0x8f, 0x1d, 0x09, 0xbd, 0x11, 0xfa, 0x00, 0x4d, 0x1f, 0xbe, 0xba, 0x0d, 0xbc, 0x3f,
	0x6e, 0x03, 0xef, 0xf5, 0x6d, 0x80, 0x7e, 0xd8, 0x07, 0xe8, 0xe7, 0x7d, 0x80, 0x7e, 0xdf, 0x07,
	0xe8, 0xd5, 0x3e, 0x40, 0x7f, 0xee, 0x03, 0xf4, 0xf7, 0x3e, 0xf0, 0x5e, 0xef, 0x03, 0xf4, 0xe3,
	0x5f, 0x81, 0xb7, 0x6c, 0xd9, 0xff, 0xf1, 0xc7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x36, 0x2e,
	0x9f, 0x90, 0xdd, 0x05, 0x00, 0x00,
}
